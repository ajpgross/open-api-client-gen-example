{"version":3,"sources":["../../encoder.ts","../../variables.ts","../../configuration.ts","../../api/pet.service.ts","../../api/store.service.ts","../../api/user.service.ts","../../api/api.ts","../../model/order.ts","../../model/pet.ts","../../api.module.ts"],"names":["CustomHttpParameterCodec","prototype","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","BASE_PATH","InjectionToken","Configuration","configurationParameters","_this","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","undefined","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","PetService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","Error","append","toISOString","substr","Object","keys","addPet","pet","observe","reportProgress","options","credential","headers","set","httpHeaderAcceptSelected","httpHeaderAccept","httpContentTypeSelected","responseType_","startsWith","post","responseType","deletePet","petId","apiKey","String","delete","findPetsByStatus","status","queryParameters","HttpParams","get","params","findPetsByTags","tags","element","getPetById","updatePet","put","updatePetWithForm","name","uploadFile","additionalMetadata","body","Injectable","args","providedIn","HttpClient","Optional","Inject","decorators","StoreService","deleteOrder","orderId","getInventory","getOrderById","placeOrder","order","UserService","createUser","user","createUsersWithListInput","deleteUser","getUserByName","loginUser","logoutUser","updateUser","APIS","Order","StatusEnum","Placed","Approved","Delivered","Pet","Available","Pending","Sold","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","imports","declarations","exports","SkipSelf","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default api_key credential\n        if (!this.credentials['api_key']) {\n            this.credentials['api_key'] = () => {\n                if (this.apiKeys === null || this.apiKeys === undefined) {\n                    return undefined;\n                } else {\n                    return this.apiKeys['api_key'] || this.apiKeys['api_key'];\n                }\n            };\n        }\n\n        // init default petstore_auth credential\n        if (!this.credentials['petstore_auth']) {\n            this.credentials['petstore_auth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Swagger Petstore - OpenAPI 3.0\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n *\n * The version of the OpenAPI document: 1.0.9\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ApiResponse } from '../model/models';\nimport { Pet } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    PetServiceInterface\n} from './pet.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PetService implements PetServiceInterface {\n\n    protected basePath = 'https://petstore3.swagger.io/api/v3';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Add a new pet to the store\n     * Add a new pet to the store\n     * @param pet Create a new pet in the store\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public addPet(pet: Pet, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Pet>;\n    public addPet(pet: Pet, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Pet>>;\n    public addPet(pet: Pet, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Pet>>;\n    public addPet(pet: Pet, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n        if (pet === null || pet === undefined) {\n            throw new Error('Required parameter pet was null or undefined when calling addPet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<Pet>(`${this.configuration.basePath}/pet`,\n            pet,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Deletes a pet\n     * @param petId Pet id to delete\n     * @param apiKey \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deletePet(petId: number, apiKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public deletePet(petId: number, apiKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public deletePet(petId: number, apiKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public deletePet(petId: number, apiKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (petId === null || petId === undefined) {\n            throw new Error('Required parameter petId was null or undefined when calling deletePet.');\n        }\n\n        let headers = this.defaultHeaders;\n        if (apiKey !== undefined && apiKey !== null) {\n            headers = headers.set('api_key', String(apiKey));\n        }\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/pet/${encodeURIComponent(String(petId))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Finds Pets by status\n     * Multiple status values can be provided with comma separated strings\n     * @param status Status values that need to be considered for filter\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Array<Pet>>;\n    public findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Array<Pet>>>;\n    public findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Array<Pet>>>;\n    public findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (status !== undefined && status !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>status, 'status');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<Pet>>(`${this.configuration.basePath}/pet/findByStatus`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Finds Pets by tags\n     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n     * @param tags Tags to filter by\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findPetsByTags(tags?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Array<Pet>>;\n    public findPetsByTags(tags?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Array<Pet>>>;\n    public findPetsByTags(tags?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Array<Pet>>>;\n    public findPetsByTags(tags?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (tags) {\n            tags.forEach((element) => {\n                queryParameters = this.addToHttpParams(queryParameters,\n                  <any>element, 'tags');\n            })\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Array<Pet>>(`${this.configuration.basePath}/pet/findByTags`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find pet by ID\n     * Returns a single pet\n     * @param petId ID of pet to return\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPetById(petId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Pet>;\n    public getPetById(petId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Pet>>;\n    public getPetById(petId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Pet>>;\n    public getPetById(petId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n        if (petId === null || petId === undefined) {\n            throw new Error('Required parameter petId was null or undefined when calling getPetById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('api_key', credential);\n        }\n\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Pet>(`${this.configuration.basePath}/pet/${encodeURIComponent(String(petId))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update an existing pet\n     * Update an existing pet by Id\n     * @param pet Update an existent pet in the store\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePet(pet: Pet, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Pet>;\n    public updatePet(pet: Pet, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Pet>>;\n    public updatePet(pet: Pet, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Pet>>;\n    public updatePet(pet: Pet, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n        if (pet === null || pet === undefined) {\n            throw new Error('Required parameter pet was null or undefined when calling updatePet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.put<Pet>(`${this.configuration.basePath}/pet`,\n            pet,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Updates a pet in the store with form data\n     * @param petId ID of pet that needs to be updated\n     * @param name Name of pet that needs to be updated\n     * @param status Status of pet that needs to be updated\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public updatePetWithForm(petId: number, name?: string, status?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (petId === null || petId === undefined) {\n            throw new Error('Required parameter petId was null or undefined when calling updatePetWithForm.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (name !== undefined && name !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>name, 'name');\n        }\n        if (status !== undefined && status !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>status, 'status');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/pet/${encodeURIComponent(String(petId))}`,\n            null,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * uploads an image\n     * @param petId ID of pet to update\n     * @param additionalMetadata Additional Metadata\n     * @param body \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ApiResponse>;\n    public uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ApiResponse>>;\n    public uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ApiResponse>>;\n    public uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (petId === null || petId === undefined) {\n            throw new Error('Required parameter petId was null or undefined when calling uploadFile.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (additionalMetadata !== undefined && additionalMetadata !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>additionalMetadata, 'additionalMetadata');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (petstore_auth) required\n        credential = this.configuration.lookupCredential('petstore_auth');\n        if (credential) {\n            headers = headers.set('Authorization', 'Bearer ' + credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/octet-stream'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<ApiResponse>(`${this.configuration.basePath}/pet/${encodeURIComponent(String(petId))}/uploadImage`,\n            body,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Swagger Petstore - OpenAPI 3.0\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n *\n * The version of the OpenAPI document: 1.0.9\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { Order } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    StoreServiceInterface\n} from './store.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService implements StoreServiceInterface {\n\n    protected basePath = 'https://petstore3.swagger.io/api/v3';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Delete purchase order by ID\n     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors\n     * @param orderId ID of the order that needs to be deleted\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteOrder(orderId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public deleteOrder(orderId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public deleteOrder(orderId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public deleteOrder(orderId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (orderId === null || orderId === undefined) {\n            throw new Error('Required parameter orderId was null or undefined when calling deleteOrder.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/store/order/${encodeURIComponent(String(orderId))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Returns pet inventories by status\n     * Returns a map of status codes to quantities\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getInventory(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<{ [key: string]: number; }>;\n    public getInventory(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<{ [key: string]: number; }>>;\n    public getInventory(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<{ [key: string]: number; }>>;\n    public getInventory(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('api_key', credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<{ [key: string]: number; }>(`${this.configuration.basePath}/store/inventory`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Find purchase order by ID\n     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions\n     * @param orderId ID of order that needs to be fetched\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getOrderById(orderId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<Order>;\n    public getOrderById(orderId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<Order>>;\n    public getOrderById(orderId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<Order>>;\n    public getOrderById(orderId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n        if (orderId === null || orderId === undefined) {\n            throw new Error('Required parameter orderId was null or undefined when calling getOrderById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<Order>(`${this.configuration.basePath}/store/order/${encodeURIComponent(String(orderId))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Place an order for a pet\n     * Place a new order in the store\n     * @param order \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public placeOrder(order?: Order, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Order>;\n    public placeOrder(order?: Order, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Order>>;\n    public placeOrder(order?: Order, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Order>>;\n    public placeOrder(order?: Order, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<Order>(`${this.configuration.basePath}/store/order`,\n            order,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * Swagger Petstore - OpenAPI 3.0\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n *\n * The version of the OpenAPI document: 1.0.9\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { User } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\nimport {\n    UserServiceInterface\n} from './user.serviceInterface';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements UserServiceInterface {\n\n    protected basePath = 'https://petstore3.swagger.io/api/v3';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Create user\n     * This can only be done by the logged in user.\n     * @param user Created user object\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUser(user?: User, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<User>;\n    public createUser(user?: User, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpResponse<User>>;\n    public createUser(user?: User, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<HttpEvent<User>>;\n    public createUser(user?: User, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json',\n                'application/xml'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<User>(`${this.configuration.basePath}/user`,\n            user,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Creates list of users with given input array\n     * Creates list of users with given input array\n     * @param user \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createUsersWithListInput(user?: Array<User>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<User>;\n    public createUsersWithListInput(user?: Array<User>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<User>>;\n    public createUsersWithListInput(user?: Array<User>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<User>>;\n    public createUsersWithListInput(user?: Array<User>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.post<User>(`${this.configuration.basePath}/user/createWithList`,\n            user,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Delete user\n     * This can only be done by the logged in user.\n     * @param username The name that needs to be deleted\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public deleteUser(username: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public deleteUser(username: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public deleteUser(username: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public deleteUser(username: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling deleteUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.delete<any>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get user by user name\n     * @param username The name that needs to be fetched. Use user1 for testing. \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserByName(username: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<User>;\n    public getUserByName(username: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<User>>;\n    public getUserByName(username: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<User>>;\n    public getUserByName(username: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling getUserByName.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<User>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs user into the system\n     * @param username The user name for login\n     * @param password The password for login in clear text\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginUser(username?: string, password?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<string>;\n    public loginUser(username?: string, password?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpResponse<string>>;\n    public loginUser(username?: string, password?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<HttpEvent<string>>;\n    public loginUser(username?: string, password?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/xml' | 'application/json'}): Observable<any> {\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (username !== undefined && username !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>username, 'username');\n        }\n        if (password !== undefined && password !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>password, 'password');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/xml',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<string>(`${this.configuration.basePath}/user/login`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs out current logged in user session\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logoutUser(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public logoutUser(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public logoutUser(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public logoutUser(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/user/logout`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Update user\n     * This can only be done by the logged in user.\n     * @param username name that need to be deleted\n     * @param user Update an existent user in the store\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateUser(username: string, user?: User, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public updateUser(username: string, user?: User, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public updateUser(username: string, user?: User, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public updateUser(username: string, user?: User, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (username === null || username === undefined) {\n            throw new Error('Required parameter username was null or undefined when calling updateUser.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json',\n            'application/xml',\n            'application/x-www-form-urlencoded'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,\n            user,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './pet.service';\nimport { PetService } from './pet.service';\nexport * from './pet.serviceInterface'\nexport * from './store.service';\nimport { StoreService } from './store.service';\nexport * from './store.serviceInterface'\nexport * from './user.service';\nimport { UserService } from './user.service';\nexport * from './user.serviceInterface'\nexport const APIS = [PetService, StoreService, UserService];\n","/**\n * Swagger Petstore - OpenAPI 3.0\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n *\n * The version of the OpenAPI document: 1.0.9\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface Order { \n    id?: number;\n    petId?: number;\n    quantity?: number;\n    shipDate?: string;\n    /**\n     * Order Status\n     */\n    status?: Order.StatusEnum;\n    complete?: boolean;\n}\nexport namespace Order {\n    export type StatusEnum = 'placed' | 'approved' | 'delivered';\n    export const StatusEnum = {\n        Placed: 'placed' as StatusEnum,\n        Approved: 'approved' as StatusEnum,\n        Delivered: 'delivered' as StatusEnum\n    };\n}\n\n\n","/**\n * Swagger Petstore - OpenAPI 3.0\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n *\n * The version of the OpenAPI document: 1.0.9\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { Category } from './category';\nimport { Tag } from './tag';\n\n\nexport interface Pet { \n    id?: number;\n    name: string;\n    category?: Category;\n    photoUrls: Array<string>;\n    tags?: Array<Tag>;\n    /**\n     * pet status in the store\n     */\n    status?: Pet.StatusEnum;\n}\nexport namespace Pet {\n    export type StatusEnum = 'available' | 'pending' | 'sold';\n    export const StatusEnum = {\n        Available: 'available' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Sold: 'sold' as StatusEnum\n    };\n}\n\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { PetService } from './api/pet.service';\nimport { StoreService } from './api/store.service';\nimport { UserService } from './api/user.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}