{"version":3,"file":"user.service.d.ts","sources":["user.service.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Swagger Petstore - OpenAPI 3.0\r\n * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\\'ve switched to the design first approach! You can now help us improve the API whether it\\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\r\n *\r\n * The version of the OpenAPI document: 1.0.9\r\n * Contact: apiteam@swagger.io\r\n *\r\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\r\n * https://openapi-generator.tech\r\n * Do not edit the class manually.\r\n */\r\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../model/models';\r\nimport { Configuration } from '../configuration';\r\nimport { UserServiceInterface } from './user.serviceInterface';\r\nexport declare class UserService implements UserServiceInterface {\r\n    protected httpClient: HttpClient;\r\n    protected basePath: string;\r\n    defaultHeaders: HttpHeaders;\r\n    configuration: Configuration;\r\n    encoder: HttpParameterCodec;\r\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\r\n    private addToHttpParams;\r\n    private addToHttpParamsRecursive;\r\n    /**\r\n     * Create user\r\n     * This can only be done by the logged in user.\r\n     * @param user Created user object\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    createUser(user?: User, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json' | 'application/xml';\r\n    }): Observable<User>;\r\n    createUser(user?: User, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json' | 'application/xml';\r\n    }): Observable<HttpResponse<User>>;\r\n    createUser(user?: User, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/json' | 'application/xml';\r\n    }): Observable<HttpEvent<User>>;\r\n    /**\r\n     * Creates list of users with given input array\r\n     * Creates list of users with given input array\r\n     * @param user\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    createUsersWithListInput(user?: Array<User>, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<User>;\r\n    createUsersWithListInput(user?: Array<User>, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpResponse<User>>;\r\n    createUsersWithListInput(user?: Array<User>, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpEvent<User>>;\r\n    /**\r\n     * Delete user\r\n     * This can only be done by the logged in user.\r\n     * @param username The name that needs to be deleted\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    deleteUser(username: string, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<any>;\r\n    deleteUser(username: string, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpResponse<any>>;\r\n    deleteUser(username: string, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpEvent<any>>;\r\n    /**\r\n     * Get user by user name\r\n     * @param username The name that needs to be fetched. Use user1 for testing.\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    getUserByName(username: string, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<User>;\r\n    getUserByName(username: string, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpResponse<User>>;\r\n    getUserByName(username: string, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpEvent<User>>;\r\n    /**\r\n     * Logs user into the system\r\n     * @param username The user name for login\r\n     * @param password The password for login in clear text\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    loginUser(username?: string, password?: string, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<string>;\r\n    loginUser(username?: string, password?: string, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpResponse<string>>;\r\n    loginUser(username?: string, password?: string, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: 'application/xml' | 'application/json';\r\n    }): Observable<HttpEvent<string>>;\r\n    /**\r\n     * Logs out current logged in user session\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    logoutUser(observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<any>;\r\n    logoutUser(observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpResponse<any>>;\r\n    logoutUser(observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpEvent<any>>;\r\n    /**\r\n     * Update user\r\n     * This can only be done by the logged in user.\r\n     * @param username name that need to be deleted\r\n     * @param user Update an existent user in the store\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    updateUser(username: string, user?: User, observe?: 'body', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<any>;\r\n    updateUser(username: string, user?: User, observe?: 'response', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpResponse<any>>;\r\n    updateUser(username: string, user?: User, observe?: 'events', reportProgress?: boolean, options?: {\r\n        httpHeaderAccept?: undefined;\r\n    }): Observable<HttpEvent<any>>;\r\n}\r\n"]}