/**
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\'ve switched to the design first approach! You can now help us improve the API whether it\'s by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.9
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ApiResponse } from '../model/models';
import { Pet } from '../model/models';
import { Configuration } from '../configuration';
import { PetServiceInterface } from './pet.serviceInterface';
export declare class PetService implements PetServiceInterface {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param pet Create a new pet in the store
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPet(pet: Pet, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<Pet>;
    addPet(pet: Pet, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpResponse<Pet>>;
    addPet(pet: Pet, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpEvent<Pet>>;
    /**
     * Deletes a pet
     * @param petId Pet id to delete
     * @param apiKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePet(petId: number, apiKey?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    deletePet(petId: number, apiKey?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    deletePet(petId: number, apiKey?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<Array<Pet>>;
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpResponse<Array<Pet>>>;
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpEvent<Array<Pet>>>;
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPetsByTags(tags?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<Array<Pet>>;
    findPetsByTags(tags?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpResponse<Array<Pet>>>;
    findPetsByTags(tags?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpEvent<Array<Pet>>>;
    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getPetById(petId: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<Pet>;
    getPetById(petId: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpResponse<Pet>>;
    getPetById(petId: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpEvent<Pet>>;
    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param pet Update an existent pet in the store
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePet(pet: Pet, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<Pet>;
    updatePet(pet: Pet, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpResponse<Pet>>;
    updatePet(pet: Pet, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/xml' | 'application/json';
    }): Observable<HttpEvent<Pet>>;
    /**
     * Updates a pet in the store with form data
     * @param petId ID of pet that needs to be updated
     * @param name Name of pet that needs to be updated
     * @param status Status of pet that needs to be updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * uploads an image
     * @param petId ID of pet to update
     * @param additionalMetadata Additional Metadata
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ApiResponse>;
    uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ApiResponse>>;
    uploadFile(petId: number, additionalMetadata?: string, body?: Blob, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ApiResponse>>;
}
